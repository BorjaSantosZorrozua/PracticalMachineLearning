datos <- cbind(estudio,smd1,var1,smd2,var2,smd3,var3)
datos
# Calculo de las matrices de varianzas-covarianzas VCOV = S*R*S
# Matrices de desviaciones estandar
sd1 <- diag(c(sqrt(datos[1,3]),sqrt(datos[1,5]),sqrt(datos[1,7])))
sd2 <- diag(c(sqrt(datos[2,3]),sqrt(datos[2,5]),sqrt(datos[2,7])))
sd3 <- diag(c(sqrt(datos[3,3]),sqrt(datos[3,5]),sqrt(datos[3,7])))
sd4 <- diag(c(sqrt(datos[4,3]),sqrt(datos[4,5]),sqrt(datos[4,7])))
sd5 <- diag(c(sqrt(datos[5,3]),sqrt(datos[5,5]),sqrt(datos[5,7])))
sd6 <- diag(c(sqrt(datos[6,3]),sqrt(datos[6,5]),sqrt(datos[6,7])))
sd <- list(sd1,sd2,sd3,sd4,sd5,sd6)
# Matrices de correlacion:
library(miscTools)
matrices.correlacion <- corr.matrix.gen.3vars(5,c(rbeta(5,0.5,0.6),runif(5,0.2,1),runif(5,-1,1)),2014)
lapply(matrices.correlacion,det)
rebonato.jackel.espectral <- function(lista.matrices){
matrices.trasformadas <- vector("list",length(lista.matrices))
matriz.t <- diag(0,dim(matrices.correlacion[[1]]))
for(i in 1:length(lista.matrices)){
determinante <- det(lista.matrices[[i]])
if (determinante < 0){
descomposicion <- eigen(lista.matrices[[i]])
for (j in 1:length(descomposicion$values)){
if(descomposicion$values[j] < 0){
descomposicion$values[j] <- 0.0001
}
delta <- diag(descomposicion$values) #corregir
sqrt.delta <- diag(sqrt(descomposicion$values))
b.prima <- eigen(lista.matrices[[i]])$vectors%*%sqrt.delta
for(k in 1:dim(delta)[1]) {
matriz.t[k,k] <- 1/(sum(((descomposicion$vectors[k,])^2*diag(delta))))
}
sqrt.matriz.t <-diag(sqrt(diag(matriz.t)))
b <- sqrt.matriz.t%*%b.prima
m.aux <- b%*%t(b)
}
matrices.trasformadas[[i]] <- m.aux
}else{
matrices.trasformadas[[i]] <- lista.matrices[[i]]
}
}
matrices.trasformadas <- suppressWarnings(matrices.trasformadas)
return(matrices.trasformadas)
}
aux <- function(a,tol){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1]))
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
a <- matrices.correlacion[[1]]
a
rebonato.jackel.espectral <- function(lista.matrices){
matrices.trasformadas <- vector("list",length(lista.matrices))
matriz.t <- diag(0,dim(matrices.correlacion[[1]]))
for(i in 1:length(lista.matrices)){
determinante <- det(lista.matrices[[i]])
if (determinante < 0){
descomposicion <- eigen(lista.matrices[[i]])
for (j in 1:length(descomposicion$values)){
if(descomposicion$values[j] < 0){
descomposicion$values[j] <- 0.0001
}
delta <- diag(descomposicion$values) #corregir
sqrt.delta <- diag(sqrt(descomposicion$values))
b.prima <- eigen(lista.matrices[[i]])$vectors%*%sqrt.delta
for(k in 1:dim(delta)[1]) {
matriz.t[k,k] <- 1/(sum(((descomposicion$vectors[k,])^2*diag(delta))))
}
sqrt.matriz.t <-diag(sqrt(diag(matriz.t)))
b <- sqrt.matriz.t%*%b.prima
m.aux <- b%*%t(b)
}
matrices.trasformadas[[i]] <- m.aux
}else{
matrices.trasformadas[[i]] <- lista.matrices[[i]]
}
}
matrices.trasformadas <- suppressWarnings(matrices.trasformadas)
return(matrices.trasformadas)
}
reboinato.jackes(a)
rebonato.jackes(a)
rebonato.jackel.espectral(a)
rebonato.jackel.espectral(matrices.correlacion[[1]])
rebonato.jackel.espectral(matrices.correlacion)
A <- suppressWarnings(rebonato.jackel.espectral(matrices.correlacion))
A
aux(A[[1]])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1]))
theta
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
b
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1:(j)]))
}
}
b
cos(theta[1,1])
sin(1)
theta1 <- rbind(rep(1,dim(a)[1],theta))
dim(a)[1]
theta1 <- rbind(rep(1,dim(a)[1]),theta)
theta1
cos(theta[1,1])*prod(theta1[1:1])
cos(theta[1,2])*prod(theta1[1:1])
B <- matrix(3,3,2)
B
D <- matrix(4,3,2)
D
B
B.prima <- rbind(rep(1,3),B[,1],B[,1]*B[,2])
B.prima
B.prima <- cbind(rep(1,3),B[,1],B[,1]*B[,2])
B.prima
B.prima <- cbind(c(rep(1,3),B[,1],B[,1]*B[,2])=
B.prima <- cbind(c(rep(1,3),B[,1],B[,1]*B[,2]))
B.prima
aux <- function(a){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(c(1,sin(theta[i,][1:(j)])))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
aux(A)
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
for(j in 1:(dim(a)[2])-1){
b[i,j] <- cos(theta[i,j])*prod(c(1,sin(theta[i,][1:j])))
}
}
for(i in 1:dim(a)[1]){
b[1,dim(a)[2]] <- prod(sin(theta[i,]))
}
c <- b%*%t(b)
return(c)
}
aux(A[[1]])
theta[1,]
deim(theta)
dim(theta)
dim(a)[2]
theta <- matrix(1,dim(a)[1],nrow=(dim(a)[1])-1)
dim(theta)
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1])-1)
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1])-1))
theta <- matrix(1,nrow=dim(a)[1],ncow=(dim(a)[1]-1))
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
theta
theta[1,]
sen(theta[1,])
sin(theta[1,])
prod(c(1,sin(theta[1,][1:1])))
cos(theta[1,1])
prod(c(1,sin(theta[1,])))
prod(c(1,sin(theta[1,])))[1]
c(1,prod(sin(theta[1,])))
prod <- 1
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sen(theta[i,]))
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
sin(1)*sin(1)
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
for(i in 1:dim(a)[1]){
for(j dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
for(i in 1:dim(a)[1]){
for(j in dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
print(b)
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
print(b)
for(i in 1:dim(a)[1]){
for(j in dim(a[2])+1:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
rep(2,1)
1:10
2:2
aux <- function(a){
theta <- matrix(1,nrow=dim(a)[1],ncol=(dim(a)[1]-1))
#theta1 <- rbind(rep(1,dim(a)[1]),theta)
b <- matrix(0,nrow=dim(a)[1],ncol=dim(a)[2])
for(i in 1:dim(a)[1]){
b[i,1] <- cos(theta[i,1])
}
print(b)
for(i in 1:dim(a)[1]){
b[,dim(a)[2]] <- prod(sin(theta[i,]))
}
print(b)
for(i in 1:dim(a)[1]){
for(j in 2:dim(a[2])-1){
b[i,j] <- cos(theta[i,j])*prod(sin(theta[i,][1,j-1]))
}
}
#c <- b%*%t(b)
return(b)
}
aux(A[[1]])
dim(a)[2]
install.packages("knitr")
# SETTING THE SEED TO GUARANTEE THE REPRODUCIBILITY.
set.seed(1985)
# CARGA DE LOS DATOS:
# Training dataset:
training.data <- read.csv("pml-training.csv",header=TRUE,na.strings=c("NA","#DIV/0!", ""))
str(training.data)
head(training.data)
summary(training.data)
# Delete missing values (100 variables will be deleted):
training.data <- training.data[,colSums(is.na(training.data)) == 0]
dim(training.data)
str(training.data)
# Thee are many variables that are not related with this work, so they must be dropped
# in order to fit a better classificator. Theese are:
names(training.data)[c(1:7)]
# So the training sata set is:
training.data <- training.data[,-c(1:7)]
# Testing dataset:
testing.data <- read.csv("pml-testing.csv",header=TRUE,na.strings=c("NA","#DIV/0!", ""))
str(testing.data)
head(testing.data)
summary(testing.data)
# Delete missing values (100 variables will be deleted):
testing.data <- testing.data[,colSums(is.na(testing.data)) == 0]
dim(testing.data)
str(testing.data)
# Thee are many variables that are not related with this work, so they must be dropped
# in order to fit a better classificator. Theese are:
names(testing.data)[c(1:7)]
# So the testing data set is:
testing.data <- testing.data[,-c(1:7)]
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Practical_Machine_Learning/Assignment1")
# MY WORKING DIRECTORY
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Practical_Machine_Learning/Assignment1")
# SETTING THE SEED TO GUARANTEE THE REPRODUCIBILITY.
set.seed(1985)
# CARGA DE LOS DATOS:
# Training dataset:
training.data <- read.csv("pml-training.csv",header=TRUE,na.strings=c("NA","#DIV/0!", ""))
str(training.data)
head(training.data)
summary(training.data)
# Delete missing values (100 variables will be deleted):
training.data <- training.data[,colSums(is.na(training.data)) == 0]
dim(training.data)
str(training.data)
# Thee are many variables that are not related with this work, so they must be dropped
# in order to fit a better classificator. Theese are:
names(training.data)[c(1:7)]
# So the training sata set is:
training.data <- training.data[,-c(1:7)]
# Testing dataset:
testing.data <- read.csv("pml-testing.csv",header=TRUE,na.strings=c("NA","#DIV/0!", ""))
str(testing.data)
head(testing.data)
summary(testing.data)
# Delete missing values (100 variables will be deleted):
testing.data <- testing.data[,colSums(is.na(testing.data)) == 0]
dim(testing.data)
str(testing.data)
# Thee are many variables that are not related with this work, so they must be dropped
# in order to fit a better classificator. Theese are:
names(testing.data)[c(1:7)]
# So the testing data set is:
testing.data <- testing.data[,-c(1:7)]
library(caret)
inTrain <- createDataPartition(y=training.data$classe,p=0.75,list=FALSE)
training.train <- training.data[inTrain,]
training.test <- training.data[-inTrain,]
dim(training.train); dim(training.test)
library(randomForest)
rf <- randomForest(classe ~. , data=training.train, method="class")
prediction.rf <- predict(rf, training.test, type = "class")
confusionMatrix(prediction.rf, training.test$classe)
lda <- train(classe~., data=training.train,method="lda")
predict.lda <- predict(lda,newdata=training.test)
confusionMatrix(training.test$classe,predict.lda)
# 4. NAIVE-BAYES
nb <- NaiveBayes(as.factor(classe)~., data=training.train)
predict.nb <- suppressWarnings(predict(nb,newdata=training.test))
confusionMatrix(training.test$classe,predict.nb$class)
library(klaR)
nb <- NaiveBayes(as.factor(classe)~., data=training.train)
predict.nb <- suppressWarnings(predict(nb,newdata=training.test))
confusionMatrix(training.test$classe,predict.nb$class)
library(rpart)
tree <- rpart(classe~., data=training.train,method="class")
predict.tree <- predict(tree,type="class",newdata=training.test)
confusionMatrix(predict.tree,training.test$classe)
cmatrix.tree <- confusionMatrix(predict.tree,training.test$classe)
cmatrix.lda <- confusionMatrix(training.test$classe,predict.lda)
cmatrix.rf <- confusionMatrix(prediction.rf, training.test$classe)
cmatrix.nb <- confusionMatrix(training.test$classe,predict.nb$class)
attributes(cmatrix.tree)
cmatrix.tree$overall
cmatrix.tree$overall[1]
as.numeric(cmatrix.tree$overall[1])
method <- c("Tree","Random forest","LDA","Naive-Bayes")
acc <- c(accuracy.tree,accuracy.rf,accuracy.lda,accuracy.nb)
accuracy.tree <- as.numeric(cmatrix.tree$overall[1])
accuracy.rf <- as.numeric(cmatrix.rf$overall[1])
accuracy.lda <- as.numeric(cmatrix.lda$overall[1])
accuracy.nb <- as.numeric(cmatrix.nb$overall[1])
method <- c("Tree","Random forest","LDA","Naive-Bayes")
acc <- c(accuracy.tree,accuracy.rf,accuracy.lda,accuracy.nb)
accuracy.table <- rbind(c(method,acc))
accuracy.table
accuracy.table <- cbind(c(method,acc))
accuracy.table
table(method,acc)
method <- c("Tree","Random forest","LDA","Naive-Bayes")
acc <- c(accuracy.tree,accuracy.rf,accuracy.lda,accuracy.nb)
accuracy.table <- rbind(c(method,acc))
accuracy.table
method <- t(c("Tree","Random forest","LDA","Naive-Bayes"))
acc <- t(c(accuracy.tree,accuracy.rf,accuracy.lda,accuracy.nb))
method
acc
a <- matrix(0,ncol=4,nrow=2)
a
a[,1] <- method
a[1,] <- method
a[2,] <- acc
a
table(a)
a <- matrix(0,ncol=4,nrow=2)
a[1,] <- method
a[2,] <- acc
a[2,] <- as.numeric(acc)
a
a[2,] <- round(acc,4)
a
accuracy.tree <- round(as.numeric(cmatrix.tree$overall[1]),4)
accuracy.tree
accuracy.tree <- round(as.numeric(cmatrix.tree$overall[1]),4)
accuracy.rf <- round(as.numeric(cmatrix.rf$overall[1]),4)
accuracy.lda <- round(as.numeric(cmatrix.lda$overall[1]),4)
accuracy.nb <- round(as.numeric(cmatrix.nb$overall[1]),4)
method <- c("Tree","Random forest","LDA","Naive-Bayes")
acc <- c(accuracy.tree,accuracy.rf,accuracy.lda,accuracy.nb)
a <- matrix(0,ncol=4,nrow=2)
a[1,] <- method
a[2,] <- acc
print(a)
a[,2]
cmatrix.rf
ref.test <- predict(rf,testing.data,type="class")
cmatrix.rf <- confusionMatrix(rf.test, testing.data$classe)
rf.test <- predict(rf,testing.data,type="class")
cmatrix.rf <- confusionMatrix(rf.test, testing.data$classe)
rf.test
print(dim(traiing.train))
print(dim(training.train))
paste("Size of the training.train dataset:",dim(training.train))
paste("Size of the training.train dataset:",dim(training.test))
paste("Size of the training.train dataset:",dim(training.train)[1],dim(training.train)[2])
paste("Size of the training.train dataset:",dim(training.test)[1],dim(training.test)[2])
a
cmatrix.rf
pml_write_files = function(x){
n = length(x)
path <- "Assignment1/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(rf.test)
pml_write_files = function(x){
n = length(x)
path <- "Assignment1/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(rf.test)
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Practical_Machine_Learning/Assignment1/answers")
setwd("D:/Documents and Settings/UPV-EHU/Escritorio/Practical_Machine_Learning/Assignment1/answers")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(rf.test)
